(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{515:function(_,l,t){"use strict";t.r(l);var v=t(1),i=Object(v.a)({},(function(){var _=this,l=_._self._c;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("blockquote",[l("p",[_._v("当你发现自己的才华撑不起你的野心时，就请安静下来学习吧！")])]),_._v(" "),l("p",[l("img",{attrs:{src:"https://image.icey.cc/3+2.png",alt:""}})]),_._v(" "),l("blockquote",[l("p",[_._v("鲁迅说过："),l("code",[_._v("答案仅供参考...")])])]),_._v(" "),l("h2",{attrs:{id:"_1、什么是原型链"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是原型链"}},[_._v("#")]),_._v(" 1、什么是原型链？")]),_._v(" "),l("p",[_._v("解析：")]),_._v(" "),l("ul",[l("li",[_._v("①所有引用类型都有一个__proto__(隐式原型)属性，属性值是一个普通的对象")]),_._v(" "),l("li",[_._v("②所有函数都有一个prototype(原型)属性，属性值是一个普通的对象")]),_._v(" "),l("li",[_._v("③所有引用类型的__proto__属性指向它构造函数的prototype")])]),_._v(" "),l("h2",{attrs:{id:"_2、px、em、rem的区别以及选取的依据"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2、px、em、rem的区别以及选取的依据"}},[_._v("#")]),_._v(" 2、px、em、rem的区别以及选取的依据？")]),_._v(" "),l("p",[_._v("解析：")]),_._v(" "),l("ul",[l("li",[_._v("px像素（Pixel）。\n"),l("ul",[l("li",[_._v("相对长度单位。像素px是相对于显示器屏幕分辨率而言的。")]),_._v(" "),l("li")])]),_._v(" "),l("li",[_._v("em是相对长度单位。\n"),l("ul",[l("li",[_._v("相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸")]),_._v(" "),l("li",[_._v("任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。")]),_._v(" "),l("li",[_._v("em特点\n"),l("ul",[l("li",[l("ol",[l("li",[_._v("em的值并不是固定的；")])])]),_._v(" "),l("li",[l("ol",{attrs:{start:"2"}},[l("li",[_._v("em会继承父级元素的字体大小。")])])])])])])]),_._v(" "),l("li",[_._v("rem\n"),l("ul",[l("li",[_._v("rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。")])])])]),_._v(" "),l("h2",{attrs:{id:"_3、css权重如何计算"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3、css权重如何计算"}},[_._v("#")]),_._v(" 3、css权重如何计算？")]),_._v(" "),l("p",[_._v("解析："),l("br"),_._v("\n!important>行间样式>id>class|属性>标签选择器>通配符")]),_._v(" "),l("h2",{attrs:{id:"_4、如何中断一个promise"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_4、如何中断一个promise"}},[_._v("#")]),_._v(" 4、如何中断一个Promise？")]),_._v(" "),l("p",[_._v("解析：")]),_._v(" "),l("ol",[l("li",[_._v("抛出异常")]),_._v(" "),l("li",[_._v("通过reject来中断")]),_._v(" "),l("li",[_._v("abort()")])]),_._v(" "),l("h2",{attrs:{id:"_5、水平居中-垂直居中的方法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5、水平居中-垂直居中的方法"}},[_._v("#")]),_._v(" 5、水平居中，垂直居中的方法?")]),_._v(" "),l("p",[_._v("解析："),l("br"),_._v("\n垂直居中：")]),_._v(" "),l("ol",[l("li",[_._v("子　verticle-align:middle + 子　display：inline-block")]),_._v(" "),l("li",[_._v("父　display:flex +　子　align-self:center;")]),_._v(" "),l("li",[_._v("父 :before　+ 方法１")]),_._v(" "),l("li",[_._v("父 display:table  +  子：display：table-cell")]),_._v(" "),l("li",[_._v("通过隐藏节点实现CSS垂直居中")]),_._v(" "),l("li",[_._v("已知父元素高度通过transform实现CSS垂直居中。给子元素的position:relative，再通过translateY即可定位到垂直居中的位置。")]),_._v(" "),l("li",[_._v("未知父元素高度通过transform实现CSS垂直居中。")]),_._v(" "),l("li",[_._v("通过line-height实现CSS垂直居中。")])]),_._v(" "),l("p",[_._v("水平居中：")]),_._v(" "),l("ol",[l("li",[_._v("通过margin: 0 auto; text-align: center实现CSS水平居中。")]),_._v(" "),l("li",[_._v("通过display:flex实现CSS水平居中。")]),_._v(" "),l("li",[_._v("通过display:table-cell和margin-left实现CSS水平居中。")]),_._v(" "),l("li",[_._v("通过position:absolute实现CSS水平居中。")]),_._v(" "),l("li",[_._v("通过width:fit-content实现CSS水平居中。")]),_._v(" "),l("li",[_._v("通过display:inline-block和text-align:center实现CSS水平居中。")]),_._v(" "),l("li",[_._v("通过position:relative、float:left和margin-left实现CSS水平居中。")]),_._v(" "),l("li",[_._v("通过隐藏节点+float的方法实现CSS水平居中。")]),_._v(" "),l("li",[_._v("通过transform实现CSS水平居中。")])])])}),[],!1,null,null,null);l.default=i.exports}}]);